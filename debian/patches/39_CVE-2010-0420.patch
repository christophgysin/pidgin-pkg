#
#
# patch "libpurple/protocols/bonjour/parser.c"
#  from [92eb6a9fce3b1c5818b396694d9c787ea6fae5c4]
#    to [44aea64497948e68cb2f7a9a8aefdcc2bcf14191]
# 
# patch "libpurple/protocols/jabber/parser.c"
#  from [f568baef38c737fc7a64fca6efeb545812f7ab7c]
#    to [92ff195cea10bcd9084fa67882743fb2026c9e5e]
# 
# patch "libpurple/xmlnode.c"
#  from [25e8ee46f17d5eb9e8dc16f2d9413507f0dc0e14]
#    to [481da12a6cdd695e349a0ed4c7a68bf213895817]
#
diff -Nur -x '*.orig' -x '*~' pidgin-2.4.3/libpurple/protocols/bonjour/parser.c pidgin-2.4.3.new/libpurple/protocols/bonjour/parser.c
--- pidgin-2.4.3/libpurple/protocols/bonjour/parser.c	2008-07-01 20:46:14.000000000 -0400
+++ pidgin-2.4.3.new/libpurple/protocols/bonjour/parser.c	2010-02-16 14:58:25.171253066 -0500
@@ -49,6 +49,31 @@
 	return FALSE;
 }
 
+static char *purple_unescape_text(const char *in)
+{
+    GString *ret;
+    const char *c = in;
+
+    if (in == NULL)
+        return NULL;
+
+    ret = g_string_new("");
+    while (*c) {
+        int len;
+        const char *ent;
+
+        if ((ent = purple_markup_unescape_entity(c, &len)) != NULL) {
+            g_string_append(ret, ent);
+            c += len;
+        } else {
+            g_string_append_c(ret, *c);
+            c++;
+        }
+    }
+
+    return g_string_free(ret, FALSE);
+}
+
 static void
 bonjour_parser_element_start_libxml(void *user_data,
 				   const xmlChar *element_name, const xmlChar *prefix, const xmlChar *namespace,
@@ -104,7 +129,7 @@
 			attrib[attrib_len] = '\0';
 
 			txt = attrib;
-			attrib = purple_unescape_html(txt);
+			attrib = purple_unescape_text(txt);
 			g_free(txt);
 			xmlnode_set_attrib_with_namespace(node, (const char*) attributes[i], attrib_ns, attrib);
 			g_free(attrib);
diff -Nur -x '*.orig' -x '*~' pidgin-2.4.3/libpurple/protocols/jabber/parser.c pidgin-2.4.3.new/libpurple/protocols/jabber/parser.c
--- pidgin-2.4.3/libpurple/protocols/jabber/parser.c	2008-07-01 20:46:14.000000000 -0400
+++ pidgin-2.4.3.new/libpurple/protocols/jabber/parser.c	2010-02-16 14:58:25.171253066 -0500
@@ -29,6 +29,31 @@
 #include "util.h"
 #include "xmlnode.h"
 
+static char *purple_unescape_text(const char *in)
+{
+    GString *ret;
+    const char *c = in;
+
+    if (in == NULL)
+        return NULL;
+
+    ret = g_string_new("");
+    while (*c) {
+        int len;
+        const char *ent;
+
+        if ((ent = purple_markup_unescape_entity(c, &len)) != NULL) {
+            g_string_append(ret, ent);
+            c += len;
+        } else {
+            g_string_append_c(ret, *c);
+            c++;
+        }
+    }
+
+    return g_string_free(ret, FALSE);
+}
+
 static void
 jabber_parser_element_start_libxml(void *user_data,
 				   const xmlChar *element_name, const xmlChar *prefix, const xmlChar *namespace,
@@ -87,7 +112,7 @@
 			attrib[attrib_len] = '\0';
 
 			txt = attrib;
-			attrib = purple_unescape_html(txt);
+			attrib = purple_unescape_text(txt);
 			g_free(txt);
 			xmlnode_set_attrib_with_namespace(node, (const char*) attributes[i], attrib_ns, attrib);
 			g_free(attrib);
diff -Nur -x '*.orig' -x '*~' pidgin-2.4.3/libpurple/xmlnode.c pidgin-2.4.3.new/libpurple/xmlnode.c
--- pidgin-2.4.3/libpurple/xmlnode.c	2008-07-01 20:46:18.000000000 -0400
+++ pidgin-2.4.3.new/libpurple/xmlnode.c	2010-02-16 14:58:25.171253066 -0500
@@ -558,6 +558,31 @@
 	return xml_with_declaration;
 }
 
+static char *purple_unescape_text(const char *in)
+{
+    GString *ret;
+    const char *c = in;
+
+    if (in == NULL)
+        return NULL;
+
+    ret = g_string_new("");
+    while (*c) {
+        int len;
+        const char *ent;
+
+        if ((ent = purple_markup_unescape_entity(c, &len)) != NULL) {
+            g_string_append(ret, ent);
+            c += len;
+        } else {
+            g_string_append_c(ret, *c);
+            c++;
+        }
+    }
+
+    return g_string_free(ret, FALSE);
+}
+
 struct _xmlnode_parser_data {
 	xmlnode *current;
 	gboolean error;
@@ -604,7 +629,7 @@
 			memcpy(attrib, attributes[i+3], attrib_len);
 			attrib[attrib_len] = '\0';
 			txt = attrib;
-			attrib = purple_unescape_html(txt);
+			attrib = purple_unescape_text(txt);
 			g_free(txt);
 			if (prefix && *prefix) {
 				xmlnode_set_attrib_with_prefix(node, (const char*) attributes[i], prefix, attrib);

#
# old_revision [5a7c739baddaf14efccf2017d05e0f9bb5b7278a]
#
# patch "finch/libgnt/gnttree.c"
#  from [c0457339498931f7f285d1d524dae9eb30c07806]
#    to [9a67dd86759ceb0b59bb05db653b8cf76911d9e2]
#
============================================================
--- pidgin/finch/libgnt/gnttree.c	c0457339498931f7f285d1d524dae9eb30c07806
+++ pidgin/finch/libgnt/gnttree.c	9a67dd86759ceb0b59bb05db653b8cf76911d9e2
@@ -1346,6 +1346,10 @@ GntTreeRow *gnt_tree_add_row_after(GntTr
 {
 	GntTreeRow *pr = NULL;
 
+	if (g_hash_table_lookup(tree->hash, key)) {
+		gnt_tree_remove(tree, key);
+	}
+
 	row->tree = tree;
 	row->key = key;
 	row->data = NULL;
